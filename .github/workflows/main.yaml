name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.5.0

      - name: Terraform Init
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        run: terraform plan
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-central-1

      - name: Terraform Apply
        run: terraform apply -auto-approve
        working-directory: ./terraform
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: eu-central-1

      - name: Build Docker Image
        run: docker build -t my-app -f fastapiapp/Dockerfile fastapiapp

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v1
        with:
          AWS_REGION: eu-central-1

      - name: Tag Docker Image
        run: docker tag my-app:latest cicd-repo/my-app:latest

      - name: Push Docker Image to ECR
        run: docker push cicd-repo/my-app:latest

      - name: Deploy to EC2
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        run: |
          INSTANCE_IP=$(terraform output -raw instance_public_ip)
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ec2-user@INSTANCE_IP << 'EOF'
          docker pull cicd-repo/my-app:latest
          docker run -d -p 80:8000 cicd-repo/my-app:latest
          EOF
